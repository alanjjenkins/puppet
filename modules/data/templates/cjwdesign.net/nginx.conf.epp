# Cors code
map $http_origin $allow_origin {
  default "";
    "~^https?://(?:[^/]*\.)?(cjwdesign\.(?:net))(?::[0-9]+)?$" "$http_origin";
}

map $request_method $cors_method {
  default "allowed";
    "OPTIONS" "preflight";
}

map $cors_method $cors_max_age {
  default "";
    "preflight" 1728000;
}

map $cors_method $cors_allow_methods {
  default "";
    "preflight" "GET, POST, OPTIONS";
}

map $cors_method $cors_allow_headers {
  default "";
    "preflight" "Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since";
}

map $cors_method $cors_content_length {
  default $initial_content_length;
    "preflight" 0;
}

map $cors_method $cors_content_type {
  default $initial_content_type;
    "preflight" "text/plain charset=UTF-8";
}


server {
    listen       80;
    server_name  cjwdesign.net;
    return       301 http://www.cjwdesign.net$request_uri;
}

server {
    server_name www.cjwdesign.net server.cjwdesign.net;
    root /srv/http/cjwdesign.net;

    index index.html index.htm index.php;

    access_log /var/log/nginx/cjwdesign.net-drupal.access.log;
    error_log /var/log/nginx/cjwdesign.net-drupal.error.log;

    location = /favicon.ico {
            log_not_found off;
            access_log off;
    }

    location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
    }

    # For drush
    location = /backup {
            deny all;
    }

    # Prevent user from accessing settings.php directly
    location ~ ^/sites/[^/]+/settings.php$ {
            deny all;
    }

    ## Replicate the Apache <FilesMatch> directive of Drupal standard
    ## .htaccess. Disable access to any code files. Return a 404 to curtail
    ## information disclosure. Hide also the text files.
    location ~* ^(?:.+\.(?:htaccess|make|txt|log|engine|inc|info|install|module|profile|po|sh|.*sql|theme|tpl(?:\.php)?|xtmpl)|code-style\.pl|/Entries.*|/Repository|/Root|/Tag|/Template)$ {
            return 404;
    }

    location ~ \..*/.*\.php$ {
            return 403;
    }

    # Cors code
    map $http_origin $allow_origin {
      default "";
        "~^https?://(?:[^/]*\.)?(cjwdesign\.(?:net))(?::[0-9]+)?$" "$http_origin";

    }

    map $request_method $cors_method {
      default "allowed";
        "OPTIONS" "preflight";

    }

    map $cors_method $cors_max_age {
      default "";
        "preflight" 1728000;

    }

    map $cors_method $cors_allow_methods {
      default "";
        "preflight" "GET, POST, OPTIONS";

    }

    map $cors_method $cors_allow_headers {
      default "";
        "preflight" "Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since";

    }

    map $cors_method $cors_content_length {
      default $initial_content_length;
        "preflight" 0;

    }

    map $cors_method $cors_content_type {
      default $initial_content_type;
        "preflight" "text/plain charset=UTF-8";

    }

    add_header Access-Control-Allow-Origin $allow_origin;
    add_header Access-Control-Allow-Credentials 'true';
    add_header Access-Control-Max-Age $cors_max_age;
    add_header Access-Control-Allow-Methods $cors_allow_methods;
    add_header Access-Control-Allow-Headers $cors_allow_headers;

    set $initial_content_length $sent_http_content_length;
    add_header 'Content-Length' "";
    add_header 'Content-Length' $cors_content_length;

    set $initial_content_type $sent_http_content_type;
    add_header Content-Type "";
    add_header Content-Type $cors_content_type;

    if ($request_method = 'OPTIONS') {
      return 204;
    }

    location / {
            # This is cool because no php is touched for static content
            try_files $uri @rewrite;

            add_header Access-Control-Allow-Origin $allow_origin;
            add_header Access-Control-Allow-Credentials 'true';
            add_header Access-Control-Max-Age $cors_max_age;
            add_header Access-Control-Allow-Methods $cors_allow_methods;
            add_header Access-Control-Allow-Headers $cors_allow_headers;

            set $initial_content_length $sent_http_content_length;
            add_header 'Content-Length' "";
            add_header 'Content-Length' $cors_content_length;

            set $initial_content_type $sent_http_content_type;
            add_header Content-Type "";
            add_header Content-Type $cors_content_type;

            if ($request_method = 'OPTIONS') {
              return 204;
            }
    }

    location @rewrite {
            # Some modules enforce no slash (/) at the end of the URL
            # Else this rewrite block wouldn't be needed (GlobalRedirect)
            #rewrite ^/(.*)$ /index.php?q=$1&$args;
            rewrite ^ /index.php last;
    }

    # Use an SSH tunnel to access those pages. They shouldn't be visible to
    # external peeping eyes.
    location = /install.php {
            allow 127.0.0.1;
            deny all;
    }

    location = /update.php {
            allow 127.0.0.1;
            deny all;
    }

    location ~ \.php$ {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_intercept_errors on;
            fastcgi_pass   127.0.0.1:9000;
    }

    ## Drupal 7 generated image handling, i.e., imagecache in core. See:
    ## https://drupal.org/node/371374
    location ~* /sites/.*/files/styles/ {
            access_log off;
            expires 30d;
            try_files $uri @rewrite;
    }

    # Fighting with ImageCache? This little gem is amazing.
    location ~ ^/sites/.*/files/imagecache/ {
            try_files $uri @rewrite;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
            expires max;
            log_not_found off;
    }
}
